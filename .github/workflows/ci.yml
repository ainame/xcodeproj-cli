name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PRODUCT_NAME: xcodeproj

jobs:
  test-macos:
    name: Test on macOS
    runs-on: macos-15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

    - name: Cache Swift Dependencies
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-

    - name: Build Debug
      run: swift build -v

    - name: Build Release
      run: swift build -c release -v

    - name: Test Basic Commands
      run: |
        # Test version and help
        .build/release/${{ env.PRODUCT_NAME }} --version
        .build/release/${{ env.PRODUCT_NAME }} --help

        # Test a few key commands
        .build/release/${{ env.PRODUCT_NAME }} create TestProject --organization-name "Test Org" --bundle-identifier "com.test.app"
        .build/release/${{ env.PRODUCT_NAME }} list-targets TestProject.xcodeproj
        .build/release/${{ env.PRODUCT_NAME }} list-build-configurations TestProject.xcodeproj

        # Cleanup
        rm -rf TestProject.xcodeproj

    - name: Run Comprehensive Tests
      run: |
        ./scripts/test.sh

    - name: Cleanup Test Artifacts
      run: |
        rm -rf TestDemo.xcodeproj TestDemo/

  lint:
    name: Swift Format Check
    runs-on: macos-15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

    - name: Check Swift Format
      run: |
        # Check if swift-format is available, if not skip
        if command -v swift-format >/dev/null 2>&1; then
          echo "Running swift-format check..."
          find Sources -name "*.swift" -exec swift-format lint {} \;
        else
          echo "swift-format not available, skipping format check"
        fi

  test-linux:
    name: Test Linux Compatibility 
    runs-on: ubuntu-latest
    needs: test-macos  # Run after macOS tests pass

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'

    - name: Run Native Linux Compatibility Tests
      run: |
        # Make scripts executable
        chmod +x scripts/test-linux-native.sh
        chmod +x scripts/test-core.sh
        
        # Run the native Linux compatibility tests (no Docker overhead)
        ./scripts/test-linux-native.sh

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: linux-compatibility-test-logs
        path: |
          /tmp/test-*
        retention-days: 7
