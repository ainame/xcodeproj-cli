name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PRODUCT_NAME: xcodeproj

jobs:
  test-macos:
    name: Test on macOS
    runs-on: macos-15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

    - name: Cache Swift Dependencies
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-

    - name: Build Debug
      run: swift build -v

    - name: Build Release
      run: swift build -c release -v

    - name: Test Basic Commands
      run: |
        # Test version and help
        .build/release/${{ env.PRODUCT_NAME }} --version
        .build/release/${{ env.PRODUCT_NAME }} --help

        # Test a few key commands
        .build/release/${{ env.PRODUCT_NAME }} create TestProject --organization-name "Test Org" --bundle-identifier "com.test.app"
        .build/release/${{ env.PRODUCT_NAME }} list-targets TestProject.xcodeproj
        .build/release/${{ env.PRODUCT_NAME }} list-build-configurations TestProject.xcodeproj

        # Cleanup
        rm -rf TestProject.xcodeproj

    - name: Run Comprehensive Tests
      run: |
        ./scripts/test.sh

    - name: Cleanup Test Artifacts
      run: |
        rm -rf TestDemo.xcodeproj TestDemo/

  lint:
    name: Swift Format Check
    runs-on: macos-15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

    - name: Check Swift Format
      run: |
        # Check if swift-format is available, if not skip
        if command -v swift-format >/dev/null 2>&1; then
          echo "Running swift-format check..."
          find Sources -name "*.swift" -exec swift-format lint {} \;
        else
          echo "swift-format not available, skipping format check"
        fi

  test-linux:
    name: Test Linux Compatibility 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Cache all dependencies
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.local/share/swiftly
          ~/.swiftpm/swift-sdks
          .build
        key: ${{ runner.os }}-deps-6.1.2-${{ hashFiles('Package.resolved', '**/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-deps-6.1.2-
          ${{ runner.os }}-deps-

    # Install dependencies
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install libcurl4-openssl-dev

    - name: Install Swiftly and Swift Toolchain
      uses: vapor/swiftly-action@v0.2.0
      with:
        toolchain: 6.1.2
    
    - name: Verify Swift Installation
      run: |
        echo "Verifying Swift installation..."
        which swift
        swift --version

    - name: Install Linux Static SDK
      run: |
        echo "Installing Linux static SDK for Swift 6.1.2..."
        if ! swift sdk list | grep -q "swift-6.1.2-RELEASE_static-linux-0.0.1"; then
          swift sdk install \
            https://download.swift.org/swift-6.1.2-release/static-sdk/swift-6.1.2-RELEASE/swift-6.1.2-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz \
            --checksum df0b40b9b582598e7e3d70c82ab503fd6fbfdff71fd17e7f1ab37115a0665b3b
        else
          echo "Linux static SDK already installed"
        fi
        
        echo "Available SDKs:"
        swift sdk list

    - name: Run Native Linux Compatibility Tests
      run: |
        # Make scripts executable
        chmod +x scripts/test-linux-native.sh
        chmod +x scripts/test-core.sh
        
        # Debug environment
        echo "Environment check:"
        echo "OS: $OSTYPE"
        echo "PWD: $(pwd)"
        echo "Swift path: $(which swift)"
        
        # Run the native Linux compatibility tests (builds and tests actual code)
        ./scripts/test-linux-native.sh

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: linux-compatibility-test-logs
        path: |
          /tmp/tmp.*
          *.log
        if-no-files-found: ignore
        retention-days: 7
