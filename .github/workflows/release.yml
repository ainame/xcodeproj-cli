name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.0.2)'
        required: true
        type: string

permissions:
  contents: write

env:
  PRODUCT_NAME: xcodeproj

jobs:
  build:
    name: Build Universal Binary
    runs-on: macos-15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.3.app/Contents/Developer

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build for arm64 (Apple Silicon)
      run: |
        swift build -c release --arch arm64
        mkdir -p build/arm64
        cp .build/arm64-apple-macosx/release/${{ env.PRODUCT_NAME }} build/arm64/

    - name: Build for x86_64 (Intel)
      run: |
        swift build -c release --arch x86_64
        mkdir -p build/x86_64
        cp .build/x86_64-apple-macosx/release/${{ env.PRODUCT_NAME }} build/x86_64/

    - name: Create Universal Binary
      run: |
        mkdir -p build/universal
        lipo -create -output build/universal/${{ env.PRODUCT_NAME }} \
          build/arm64/${{ env.PRODUCT_NAME }} \
          build/x86_64/${{ env.PRODUCT_NAME }}

    - name: Verify Universal Binary
      run: |
        file build/universal/${{ env.PRODUCT_NAME }}
        lipo -info build/universal/${{ env.PRODUCT_NAME }}

    - name: Create Archive
      run: |
        cd build/universal
        tar -czf ../../${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz ${{ env.PRODUCT_NAME }}
        cd ../..

    - name: Generate Checksums
      run: |
        cd build/universal
        shasum -a 256 ${{ env.PRODUCT_NAME }} > ../../${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-checksums.txt
        cd ../..
        shasum -a 256 ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz >> ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-checksums.txt

    - name: Test Binary
      run: |
        chmod +x build/universal/${{ env.PRODUCT_NAME }}
        build/universal/${{ env.PRODUCT_NAME }} --version
        build/universal/${{ env.PRODUCT_NAME }} --help

    - name: Create Release and Upload Assets
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create release notes
        cat > release_notes.md << 'EOF'
        ## xcodeproj CLI ${{ steps.version.outputs.version }}

        A command-line tool for manipulating Xcode project files (.xcodeproj) using Swift.

        ### Installation

        #### Download and Install
        ```bash
        # Download the binary
        curl -L -o xcodeproj.tar.gz https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz
        tar -xzf xcodeproj.tar.gz

        # Make executable and move to PATH
        chmod +x ${{ env.PRODUCT_NAME }}
        mv ${{ env.PRODUCT_NAME }} /usr/local/bin/
        ```

        #### Homebrew (Coming Soon)
        ```bash
        brew install ainame/tap/xcodeproj
        ```

        ### Features
        - ✅ All 19 commands from xcodeproj-mcp-server
        - ✅ Universal binary (Apple Silicon + Intel)
        - ✅ Fast execution and agent-friendly
        - ✅ Complete Xcode project manipulation

        ### Verification
        ```bash
        xcodeproj --version
        xcodeproj --help
        ```

        ### Checksums
        See attached checksums file for binary verification.
        EOF

        # Determine if prerelease
        PRERELEASE_FLAG=""
        if [[ "${{ steps.version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.version.outputs.version }}" == *"rc"* ]]; then
          PRERELEASE_FLAG="--prerelease"
        fi

        # Create release with assets
        gh release create "${{ steps.version.outputs.version }}" \
          --title "xcodeproj CLI ${{ steps.version.outputs.version }}" \
          --notes-file release_notes.md \
          $PRERELEASE_FLAG \
          build/universal/${{ env.PRODUCT_NAME }} \
          ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz \
          ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-checksums.txt
