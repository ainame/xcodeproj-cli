name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.2)'
        required: true
        type: string

permissions:
  contents: write

env:
  PRODUCT_NAME: xcodeproj

jobs:
  build-and-release:
    name: Build Universal Binaries and Release
    runs-on: macos-15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Install Swiftly for Linux cross-compilation
      run: |
        # Install Swiftly using the official macOS method to user directory
        curl -O https://download.swift.org/swiftly/darwin/swiftly.pkg
        installer -pkg swiftly.pkg -target CurrentUserHomeDirectory
        rm swiftly.pkg
        
        # Add to PATH for current session
        echo "$HOME/.swiftly/bin" >> $GITHUB_PATH
        export PATH="$HOME/.swiftly/bin:$PATH"

    - name: Build Linux binaries
      run: ./scripts/build-linux.sh

    - name: Clean build directory before macOS build
      run: rm -rf .build

    - name: Build macOS binaries
      run: ./scripts/build-macos.sh

    - name: Test Binaries
      run: |
        # Test macOS binary
        chmod +x build/macos/universal/${{ env.PRODUCT_NAME }}
        build/macos/universal/${{ env.PRODUCT_NAME }} --version
        build/macos/universal/${{ env.PRODUCT_NAME }} --help
        
        # Test Linux binaries
        chmod +x build/linux/x86_64/${{ env.PRODUCT_NAME }}
        chmod +x build/linux/aarch64/${{ env.PRODUCT_NAME }}

    - name: Update Homebrew Formula
      run: |
        ./scripts/prepare-homebrew.sh "${{ steps.version.outputs.version }}" \
          "build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz"

    - name: Commit Formula Update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Formula/xcodeproj.rb
        git commit -m "chore: update Formula for ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git push origin HEAD:main || echo "Failed to push changes"

    - name: Create Release and Upload All Assets
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Determine if prerelease
        PRERELEASE_FLAG=""
        if [[ "${{ steps.version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.version.outputs.version }}" == *"rc"* ]]; then
          PRERELEASE_FLAG="--prerelease"
        fi

        # Create release with all assets (macOS + Linux)
        gh release create "${{ steps.version.outputs.version }}" \
          --title "xcodeproj CLI ${{ steps.version.outputs.version }}" \
          --notes "" \
          $PRERELEASE_FLAG \
          build/macos/universal/${{ env.PRODUCT_NAME }} \
          build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz \
          build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-checksums.txt \
          build/linux/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz \
          build/linux/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-aarch64.tar.gz \
          build/linux/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-checksums.txt